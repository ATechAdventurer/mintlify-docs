{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI Plant Store",
    "description": "A sample API that uses a plant store as an example to demonstrate features in the OpenAPI specification",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://sandbox.mintlify.com"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/plants": {
      "get": {
        "description": "Returns all plants from the system that the user has access to",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plant response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Plant"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Go",
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/testsdkconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/testsdk\"\n  \"github.com/swagger-api/swagger-petstore/pkg/plants\"\n)\n\nconfig := testsdkconfig.NewConfig()\nclient := testsdk.NewTestSdk(config)\n\n\nparams := plants.GetPlantsRequestParams{}\n\n\nresponse, err := client.Plants.GetPlants(context.Background(), params)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)"
          },
          {
            "lang": "TypeScript",
            "source": "import { TestSdk } from 'test-sdk';\n\n(async () => {\n  const testSdk = new TestSdk({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await testSdk.plants.getPlants({\n    limit: 8,\n  });\n\n  console.log(data);\n})();"
          },
          {
            "lang": "Python",
            "source": "from test_sdk import TestSdk, Environment\n\nsdk = TestSdk(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    base_url=Environment.DEFAULT.value,\n    timeout=10000\n)\n\nresult = sdk.plants.get_plants(limit=8)\n\nprint(result)"
          }
        ]
      },
      "post": {
        "description": "Creates a new plant in the store",
        "requestBody": {
          "description": "Plant to add to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "plant response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plant"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Go",
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/testsdkconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/testsdk\"\n  \"github.com/swagger-api/swagger-petstore/pkg/plants\"\n)\n\nconfig := testsdkconfig.NewConfig()\nclient := testsdk.NewTestSdk(config)\n\n\nrequest := plants.NewPlant{}\nrequest.SetName(\"Name\")\nrequest.SetId(int64(123))\n\nresponse, err := client.Plants.CreatePlants(context.Background(), request)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)"
          },
          {
            "lang": "TypeScript",
            "source": "import { NewPlant, TestSdk } from 'test-sdk';\n\n(async () => {\n  const testSdk = new TestSdk({\n    token: 'YOUR_TOKEN',\n  });\n\n  const newPlant: NewPlant = {\n    name: 'name',\n    tag: 'tag',\n    id: 2,\n  };\n\n  const { data } = await testSdk.plants.createPlants(input);\n\n  console.log(data);\n})();"
          },
          {
            "lang": "Python",
            "source": "from test_sdk import TestSdk, Environment\nfrom test_sdk.models import NewPlant\n\nsdk = TestSdk(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    base_url=Environment.DEFAULT.value,\n    timeout=10000\n)\n\nrequest_body = NewPlant(\n    name=\"name\",\n    tag=\"tag\",\n    id_=2\n)\n\nresult = sdk.plants.create_plants(request_body=request_body)\n\nprint(result)"
          }
        ]
      }
    },
    "/plants/{id}": {
      "delete": {
        "description": "Deletes a single plant based on the ID supplied",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of plant to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Plant deleted",
            "content": {}
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Go",
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/testsdkconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/testsdk\"\n)\n\nconfig := testsdkconfig.NewConfig()\nclient := testsdk.NewTestSdk(config)\n\nresponse, err := client.Plants.DeletePlantsById(context.Background(), int64(1234))\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)"
          },
          {
            "lang": "TypeScript",
            "source": "import { TestSdk } from 'test-sdk';\n\n(async () => {\n  const testSdk = new TestSdk({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await testSdk.plants.deletePlantsById(9);\n\n  console.log(data);\n})();"
          },
          {
            "lang": "Python",
            "source": "from test_sdk import TestSdk, Environment\n\nsdk = TestSdk(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    base_url=Environment.DEFAULT.value,\n    timeout=10000\n)\n\nresult = sdk.plants.delete_plants_by_id(id_=3)\n\nprint(result)"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Plant": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the plant",
            "type": "string"
          },
          "tag": {
            "description": "Tag to specify the type",
            "type": "string"
          }
        }
      },
      "NewPlant": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Plant"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "description": "Identification number of the plant",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "Error": {
        "required": [
          "error",
          "message"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}